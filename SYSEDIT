#!/bin/bash
# SYSEDIT - Perform update to running system configuration and associated files.
#	6/13/21.	wmk. 11:30
# Usage.  bash SYSEDIT <option>  <shellfile-name>
#
#   <option> = SYSEDIT option; to be defined, but can be .bashrc or .gitconfig update,
#              LibreCalc update to mention a few...
#	SYSEDIT - update SYSEDIT bash shell on ~/sysprocs
#
#	LibreOffice - copy BadAss, XRay libraries to LibreOffice../user/basic area
#	LibreCalc	and copy Standard/Module1.xba to ../user/basic/Standard
#			depends on CALC_LIB_PATH set correctly in .bashrc
#
#	bash - copy .bashrc to ~/ and suggest terminal restart to pick up changes
#
#	proc - copy <shellfile_name> to ~/sysprocs and 
#			to path WINUBUNTU/sysprocs
#           <shellfile-name> = proc to update in ~/sysprocs and
#              on path WINUBUNTU/sysprocs (e.g. InstallWifi.sh)
#	start - copy <shellfile_name> to ~/sysstart and WINUBUNTU_PATH/sysstart
#
# Modification History.
# --------------------
# 2/13/21.	wmk.	total rewrite based on 7/30/20 version, but using
#					jumpto definition to clean up logic.
# 7/22/20.  wmk.	"libreoffice" case modified to list manual changes to be
#			made by user to bring LibreOffice/LibreCalc up-to-date
# 7/24/20.  wmk.	"bash" case modified to also copy .bashrc to the
#					install path $WINUBUNTU_PATH
# 7/27/20.	wmk.	"proc" case added to update procs in ~/sysprocs;
#					"start" case added to update procs in ~/sysstart
# 7/30/20	wmk.	"bash" case modified to also copy .bashrc to the
#					~/sysstart directory
# 3/1/21.	wmk.	modified for running with make; no environment vars
#					inherited.
# 5/25/21.	wmk.	modified for running on Kay's system; KSYSEDIT.
# 6/13/21.	wmk.	modified for any multihost support.
# Notes.
#      LibreCalc/LibreOffice operations:
#      copy $WINGIT_PATH/Libraries-Project/BadAss to $CALC_LIB_PATH
#	   copy $WINGIT_PATH/Libraries-Project/XRay to $CALC_LIB_PATH
#	   copy file $WINGIT_PATH/Libraries-Project/script.xlc to $CALC_LIB_PATH
#      copy file $WINGIT_PATH/Libraries-Project/dialog.xlc to $CALC_LIB_PATH
#      copy file $WINGIT_PATH/Libraries-Project/Standard/Module1.xba to
#            $CALC_LIB_PATH/Standard
# Wishlist.
# 	Add "revert" option to revert to last change
#jumpto function definition
function jumpto
{
    label=$1
    cmd=$(sed -n "/$label:/{:a;n;p;ba};" $0 | grep -v ':$')
    eval "$cmd"
    exit
}
if [ "$HOME" == "/home/ubuntu" ]; then
 folderbase=/media/ubuntu/Windows/Users/Bill
else
 folderbase=$HOME
fi
if [ -z "$system_log"]; then
  system_log=$HOME/SystemLog.txt
  WINGIT_PATH=$folderbase/Documents/GitHub
  WINUBUNTU_PATH=$folderbase/ubuntu
fi
touch $system_log #
bash ~/sysprocs/LOGMSG "  SYSEDIT initiated."
echo "  SYSEDIT initiated."
sysedit_mode=$1
sysedit_mode=${sysedit_mode,,}
sysedit_proc=$2
if [ -z "$sysedit_mode" ]; then
  bash ~/sysprocs/LOGMSG "  No SYSEDIT mode specified. SYSEDIT abandoned."
  echo "  No SYSEDIT mode specified. SYSEDIT abandoned."
  jumpto BailOut
fi
case $sysedit_mode in
"sysedit")
 bash ~/sysprocs/LOGMSG "  SYSEDIT mode = '$sysedit_mode' \n   Cannot SYSEDIT itself - abandoned."
    echo "  SYSEDIT mode = '$sysedit_mode' "
    echo "SYSEDIT will clobber itself while running..."
    echo "Run NewSYSEDIT bash script to update SYSEDIT"
 #   read -t5 -p "Press Enter to continue..."
    jumpto BailOut;;
"librecalc" | "libreoffice")
#    date +%T >> $system_log #
#    echo "  Updating LibreOffice MyDocuments Libraries..." >> $system_log #
  bash ~/sysprocs/LOGMSG "  Updating LibreOffice MyDocuments Libraries..."
    echo "  Updating LibreOffice MyDocuments Libraries..."
    if [ true ]; then
#       echo "  SYSEDIT $sysedit_mode - Ignored (not implemented)" >> $system_log #
  bash ~/sysprocs/LOGMSG "  SYSEDIT $sysedit_mode - Ignored (not implemented)"
       echo "  SYSEDIT $sysedit_mode - Ignored (not implemented)"
       echo "  Use LibreOffice/Tools/Macros/Organize Macros/Organizer/Libraries/Import"
       echo "  Do the following from any Calc spreadsheet..."
       echo "Tools/Options/LibreOffice/Security Macros enable with user approval"
       echo "Tools/Macros/Organize Macros/Libre Basic/Organizer/Libraries"
       echo "  Import/BadAss from '$'WINGIT_PATH/Libraries-Project/BadAss"
       echo "  Import/Banking-Basics from above"
       echo "  Import/XrayTool from above"
       echo "  Use Geany to get DayName.bas code, then move to"
       echo "  Tools/Macros/Edit Macros/Standard/Module1 and insert DayName.bas code"
       echo "    after Main"
       echo "  Tools/Customize/Keyboard Load alpha.cfg"
       echo "  Tools/Macros/Edit Macros/BadAss Module1/main, ensure DEC2=123 LibreCalc"
       echo "     or DEC2=118 OpenOffice and also in Module2 dialog recording subs"
       echo "  Tools/Options/LibreCalc/General move right on 'enter' "
       read -p "Press Enter to continue..."
    else
#      copy $WINGIT_PATH/Libraries-Project/BadAss to $CALC_LIB_PATH
    echo "  copying BadAss library.." >> $system_log #
 bash ~/sysprocs/LOGMSG "  copying BadAss library.."
    echo "  copying BadAss library.."
    cp -ru $WINGIT_PATH/Libraries-Project/BadAss  $CALC_LIB_PATH
#      copy $WINGIT_PATH/Libraries-Project/XRay to $CALC_LIB_PATH
#    echo "  copying XRayTool library.." >> $system_log #
 bash ~/sysprocs/LOGMSG "  copying XRayTool library.."
    echo "  copying XrayTool library.."
    cp -ru $WINGIT_PATH/Libraries-Project/XrayTool  $CALC_LIB_PATH
#      copy file $WINGIT_PATH/Libraries-Project/u_script.xlc to $CALC_LIB_PATH/script.xlc
#      copy file $WINGIT_PATH/Libraries-Project/u_dialog.xlc to $CALC_LIB_PATH/dialog.xlc
    echo "  updating MyDocuments library definitions.." >> $system_log #
 bash ~/sysprocs/LOGMSG "  copying MyDocuments library definitions.."
    echo "  updating MyDocuments library definitions.."
    cp -u $WINGIT_PATH/Libraries-Project/u_script.xlc  $CALC_LIB_PATH/script.xlc
    cp -u $WINGIT_PATH/Libraries-Project/u_dialog.xlc  $CALC_LIB_PATH/dialog.xlc
#      copy file $WINGIT_PATH/Libraries-Project/Standard/Module1.xba to
#            $CALC_LIB_PATH/Standard
#    echo "  copying Standard/Module1.." >> $system_log #
 bash ~/sysprocs/LOGMSG "  copying Standard/Module1..."
    echo "  copying Standard/Module1.."
#  cp -u $WINGIT_PATH/Libraries-Project/Standard/Module1.xba $CALC_LIB_PATH/Standard/Module1.xba
#    date +%T >> $system_log #
#   echo "  SYSEDIT complete." >> $system_log 
    echo "  SYSEDIT complete."
 bash ~/sysprocs/LOGMSG "  SYSEDIT complete."
    echo  -e "If LibreOffice/LibreCalc is running, close/exit "
    echo " and re-open to pick up changes."
  fi # end skip-around conditional
   jumpto NormalExit;;
"bash")
#    date +%T >> $system_log #
#    echo "  SYSEDIT mode = '$sysedit_mode' " >> $system_log 
#    echo "  updating ~/.bashrc" >> $system_log
 bash ~/sysprocs/LOGMSG "  SYSEDIT mode = '$sysedit_mode'\n  updating ~/.bashrc"
    echo "  SYSEDIT mode = '$sysedit_mode' "
    echo "  updating ~/.bashrc..."
    cp -u $WINGIT_PATH/ShellFiles/.bashrc ~/.bashrc
    echo "  updating $WINUBUNTU_PATH/sysstart/.bashrc..." >> $system_log
# bash ~/sysprocs/LOGMSG "  updating $WINUBUNTU_PATH/sysstart/.bashrc..."
#    echo "  updating $WINUBUNTU_PATH/sysstart/.bashrc..."
    cp -u $WINGIT_PATH/ShellFiles/.bashrc $WINUBUNTU_PATH/sysstart
#    echo "  updating $WINUBUNTU_PATH/sysstart/.bashrc..." >> $system_log
 bash ~/sysprocs/LOGMSG "  updating $WINUBUNTU_PATH/sysstart/.bashrc..."
    echo "  updating ~/sysstart/.bashrc..."
    cp -u $WINGIT_PATH/ShellFiles/.bashrc ~/sysstart
    date +%T >> $system_log #
    echo "  SYSEDIT complete." >> $system_log 
 bash ~/sysprocs/LOGMSG "  SYSEDIT complete."
    echo "  SYSEDIT complete."
    echo "  exit and restart Terminal to pick up changes..."
    read -t2 -p "Press Enter to continue.."
    jumpto NormalExit;;
"proc")
#    date +%T >> $system_log #
#    echo "  SYSEDIT mode = '$sysedit_mode' " >> $system_log #
 bash ~/sysprocs/LOGMSG "  SYSEDIT mode = '$sysedit_mode' "
    # copy proc to running ~/sysprocs and WINUBUNTU_PATH/sysprocs
    if [ -z "$sysedit_proc" ]; then
#      echo "  SYSEDIT - proc filename not specified." >> $system_log #
#      echo "  SYSEDIT abandoned." >> $system_log #
  bash ~/sysprocs/LOGMSG "  SYSEDIT - proc filename not specified.\n   SYSEDIT abandoned."
      echo "  SYSEDIT - proc filename not specified."
      echo "  SYSEDIT abandoned."
      jumpto BailOut
    fi  # end file not specified conditional
    if [ ${sysedit_proc,,} == "sysedit" ]; then
 bash ~/sysprocs/LOGMSG "  SYSEDIT PROC = '$sysedit_proc' \n   Cannot SYSEDIT itself - abandoned."
    echo "  SYSEDIT PROC = '$sysedit_proc' "
    echo "SYSEDIT will clobber itself while running..."
    echo "Run NewSYSEDIT bash script to update SYSEDIT"
    read -t5 -p "Press Enter to continue..."
    jumpto BailOut
    fi 
    # copy proc to running ~/sysprocs and WINUBUNTU_PATH/sysprocs
    cp -u $WINGIT_PATH/ShellFiles/$sysedit_proc ~/sysprocs
    cp -u $WINGIT_PATH/ShellFiles/$sysedit_proc $WINUBUNTU_PATH/sysprocs
    if [ $? -eq 0 ]; then
#      echo "    $sysedit_proc updated." >> $system_log #
  bash ~/sysprocs/LOGMSG "    $sysedit_proc updated."
      echo "    $sysedit_proc updated." 
    else
#      echo "  Error copying proc to target - SYSEDIT failed." >>$system_log #
  bash ~/sysprocs/LOGMSG "  Error copying $sysedit_proc to target - SYSEDIT failed."
      echo "  Error copying proc to target - SYSEDIT failed."
    fi   # end no copy error conditional   
    jumpto NormalExit;;  
  "start")
#    date +%T >> $system_log #
#    echo "  SYSEDIT mode = '$sysedit_mode' " >> $system_log #
 bash ~/sysprocs/LOGMSG "  SYSEDIT mode = '$sysedit_mode' "
    # copy proc to running ~/sysstart and WINUBUNTU_PATH/sysstart
    if [ -z "$sysedit_proc" ]; then
 #     echo "  SYSEDIT - proc filename not specified." >> $system_log #
 #     echo "  SYSEDIT abandoned." >> $system_log #
 bash ~/sysprocs/LOGMSG "  SYSEDIT - proc filename not specified.\n  SYSEDIT abandoned."
      echo "  SYSEDIT - proc filename not specified."
      echo "  SYSEDIT abandoned."
      jumpto BailOut
    fi  # end file not specified conditional 
    # copy proc to running ~/sysprocs and WINUBUNTU_PATH/sysstart
    cp -u $WINGIT_PATH/ShellFiles/$sysedit_proc ~/sysstart
    cp -u $WINGIT_PATH/ShellFiles/$sysedit_proc $WINUBUNTU_PATH/sysstart
    if [ $? -eq 0 ]; then
#      echo "    $2 updated." >> $system_log #
 bash ~/sysprocs/LOGMSG "    $sysedit_proc updated."
      echo "    $sysedit_proc updated." 
    else
#      echo "  Error copying proc to target - SYSEDIT failed." >>$system_log #
  bash ~/sysprocs/LOGMSG "  Error copying proc to target - SYSEDIT failed."
      echo "  Error copying proc to target - SYSEDIT failed."
    fi   # end no copy error conditional   
    jumpto NormalExit;;
  *)
    bash ~/sysprocs/LOGMSG "  **  Unrecognized SYSEDIT mode $sysedit_mode\n     SYSEDIT abandoned."
    echo "  ** Unrecognized SYSEDIT mode '$sysedit_mode' "
    echo "  SYSEDIT abandoned."
    jumpto BailOut;;
esac     # end case
#read -p "SYSEDIT stubbed for now... Press Enter to continue..."
jumpto NormalExit
NormalExit:
bash ~/sysprocs/LOGMSG "  SYSEDIT completed."
echo "  SYSEDIT completed." 
jumpto BailOut
BailOut:
